
MultiplicationTableUsingForLoop
Write a program in C to display the multiplication table for a given integer. 
  #include<stdio.h>
int main()
{
    int i,n;
    scanf("%d",&n);
    if(n<0)
    {
        printf("Negative value not allowed.");
        return 0;
    }
    for(i=1;i<=10;i++)
    {
        printf("%d X %d = %d\n",n,i,n*i);
    }
}
/////////////////////////////////////////////////////////////////////////////////
Factorial Calculation
[Title:- Factorial Calculation] [for-loop]
------------------------------------------

Write a C program to calculate the factorial of a given positive integer.
The program should prompt the user to enter a number, compute its factorial, and display the result.

-> If the user enters a negative number, the program should display an error message: "Invalid input. Please enter a positive integer."
-> If the input is 0, the program should print: "Factorial of 0 = 1," because by definition, 0! = 1
#include<stdio.h>
int main()
{
    int i,n,c=1;
    scanf("%d",&n);
    if(n<0)
    {
    printf("Invalid input Please enter a positive integer.");
        return 0;
    } 
   for(i=n;i>=1;i--)
   {
    c=c*i;
    
   }
   printf("Factorial of %d = %d",n,c);
}
///////////////////////////////////////////////////////////////////////////////////
FindCube
Write a program in C to display the cube of the number up to an integer.



Test Data :

Input number of terms : 5

Expected Output :

Number is : 1 and cube of the 1 is :1

Number is : 2 and cube of the 2 is :8

Number is : 3 and cube of the 3 is :27

Number is : 4 and cube of the 4 is :64

Number is : 5 and cube of the 5 is :125
#include<stdio.h>
int main()
{
 int n,i;
 scanf("%d",&n);
 if(n<0)
{
    printf("Negative value not allowed.");
    return 0;
} 
for(i=1;i<=n;i++)
{
 printf("Number is : %d and cube of the %d is :%d\n",i,i,i*i*i);
}
}
/////////////////////////////////////////////////////////////////////
Fibonacci Series
Question:
Print the first N Fibonacci numbers using a for loop.
Example:
Input: N=7
Output: 0 1 1 2 3 5 8

The Fibonacci series is a sequence of numbers where:

The first two numbers are 0 and 1.

Every next number is found by adding the two numbers before it.

So it looks like this:

👉 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, …

Step by step:

Start: 0, 1

Next: 0 + 1 = 1 → 0, 1, 1

Next: 1 + 1 = 2 → 0, 1, 1, 2

Next: 1 + 2 = 3 → 0, 1, 1, 2, 3

Next: 2 + 3 = 5 → 0, 1, 1, 2, 3, 5

Next: 3 + 5 = 8 → 0, 1, 1, 2, 3, 5, 8

// Q1. Fibonacci Series
// Question:
// Print the first N Fibonacci numbers using a for loop.
// Example:
// Input: N=7
// Output: 0 1 1 2 3 5 8
#include <stdio.h>



int main() {
    int N, first = 0, second = 1, next, i;

    
    printf("Enter N: ");
    scanf("%d", &N);

    
    printf("Fibonacci Series: %d %d ",first,second);

    for (i = 2; i <= N; i++) {
       
        next = first + second;
        first = second;
        second = next;

        printf(" %d", next);
    }

    return 0;
}
/////////////////////////////////////////////////////////////////
 Check Perfect Number
Question:
A number is Perfect if the sum of its divisors (excluding itself) equals the number.
Write a program to check if a number is perfect.

Example:
Input: 28 → Divisors (1+2+4+7+14=28) → Perfect Number
🔹 What is a Perfect Number?

A Perfect Number is a number that is equal to the sum of its proper divisors.

👉 Proper divisors = all divisors of the number except the number itself.

🔹 Example 1: Number = 6

Divisors of 6 → 1, 2, 3, 6
(we don’t take 6 itself)

So, 1 + 2 + 3 = 6
✔️ 6 is a Perfect Number.

🔹 Example 2: Number = 28

Divisors of 28 → 1, 2, 4, 7, 14, 28
(exclude 28)

So, 1 + 2 + 4 + 7 + 14 = 28
✔️ 28 is also a Perfect Number.

🔹 Example 3: Number = 12

Divisors of 12 → 1, 2, 3, 4, 6, 12
(exclude 12)

So, 1 + 2 + 3 + 4 + 6 = 16 ≠ 12
❌ 12 is NOT a Perfect Number.
#include <stdio.h>

int main() {
    int num, i, sum = 0;

    // Input
    printf("Enter a number: ");
    scanf("%d", &num);

    // Find divisors and their sum
    for (i = 1; i <= num / 2; i++) {
        if (num % i == 0) {
            sum += i;
        }
    }

    // Check perfect number
    if (sum == num)
        printf("%d is a Perfect Number.\n", num);
    else
        printf("%d is NOT a Perfect Number.\n", num);

    return 0;
}
//////////////////////////////////////////////////////////////
Print Multiples of a Number

Print the first N multiples of a number.
Example:
Input: x = 7, N = 5 → Output: 7 14 21 28 35

🔹 What does "multiple" mean?

A multiple of a number x is what you get when you multiply x by another whole number.

Example:

Multiples of 7 → 7, 14, 21, 28, 35, 42, …
(because 7×1 = 7, 7×2 = 14, 7×3 = 21, …)

🔹 First N multiples of a number

This just means we take the first N values from the multiples list.

Example:

If x = 7 and N = 5:
Multiples = 7, 14, 21, 28, 35

🔹 Step by step process

Let’s say x = 4 and N = 6.

1 × 4 = 4
2 × 4 = 8
3 × 4 = 12
4 × 4 = 16
5 × 4 = 20
6 × 4 = 24

👉 First 6 multiples of 4 = 4, 8, 12, 16, 20, 24
#include <stdio.h>

int main() {
    int x, N, i;

    // Input
    printf("Enter the number: ");
    scanf("%d", &x);
    printf("Enter N: ");
    scanf("%d", &N);

    // Print multiples
    printf("First %d multiples of %d: ", N, x);
    for (i = 1; i <= N; i++) {
        printf("%d ", x * i);
    }

    return 0;
}
/////////////////////////////////////////////////////////////////
Greatest Common Divisor (GCD)
Find GCD of two numbers using a for loop.

Example:
Input: 12, 18 → GCD = 6

🔹 GCD (Greatest Common Divisor)

The Greatest Common Divisor (also called HCF – Highest Common Factor) of two numbers is the largest number that divides both numbers exactly (without remainder).

🔹 Example 1:

Find GCD of 12 and 18.

Divisors of 12 → 1, 2, 3, 4, 6, 12

Divisors of 18 → 1, 2, 3, 6, 9, 18

Common divisors → 1, 2, 3, 6
👉 Greatest = 6
✔️ So, GCD(12, 18) = 6

🔹 Example 2:

Find GCD of 8 and 20.

Divisors of 8 → 1, 2, 4, 8

Divisors of 20 → 1, 2, 4, 5, 10, 20

Common divisors → 1, 2, 4
👉 Greatest = 4
✔️ So, GCD(8, 20) = 4

🔹 Example 3:

Find GCD of 7 and 13.

Divisors of 7 → 1, 7

Divisors of 13 → 1, 13

Common divisors → 1
👉 GCD(7, 13) = 1
(These are called co-prime numbers because their GCD is 1).

#include <stdio.h>

int main() {
    int a, b, i, gcd = 1;

    // Input
    printf("Enter two numbers: ");
    scanf("%d %d", &a, &b);

    // Find GCD using for loop
    for (i = 1; i <= a && i <= b; i++) {
        if (a % i == 0 && b % i == 0) {
            gcd = i;
        }
    }

    // Output
    printf("GCD of %d and %d is %d\n", a, b, gcd);

    return 0;
}




